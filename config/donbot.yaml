parent: !include default.yaml
general_options:
  joint_vel_limit: # giskard will use the min of this number and limits from the urdf
    linear: # m/s
      default: 1
      override:
        odom_x_joint: 0.5
        odom_y_joint: 0.5
    angular: # rad/s
      default: 1
      override:
        odom_z_joint: 0.6
  joint_weights:
    # the planner prefers low weight joints to achieve solutions
    # higher weights reduce wiggling, but lower the maximum joint velocity, which might make the planner stop too early
    default: 0.01
    override:
      odom_x_joint: 0.1
      odom_y_joint: 0.1
      odom_z_joint: 0.1
plugins:
  WiggleCancel: # cancels planning if high frequencies are detected in the trajectory
    amplitude_threshold: 0.15 # the amplitude of a frequency must exceed this threshold to be detected as wiggling
    window_size: 21 # size of the moving window of sample points
    frequency_range: 0.4 # must be in the range [0,1]. Only frequencies in the range [max_detectable_frequency * wiggle_frequency_range, max_detectable_frequency] are considered as wiggling. So a value of 0 means that every frequency with an amplitude above wiggle_detection_threshold is detected as wiggling and a value of 1 means that only the max_detectable_frequency can trigger a wiggle detection.      max_detectable_frequency = 1 / (2 * sample_period)
collision_avoidance:
  external_collision_avoidance:
    distance_thresholds: # external thresholds are per joint, they therefore count for all directly controlled links
      default:
        hard_threshold: 0.0 # at this distance in [cm] that can not be surpassed
        soft_threshold: 0.05 # robot links are pushed to that distance, but it can be overpowered with high weight constraints
      override:
        odom_z_joint: # this affects all links between this and the next controlled joint
          hard_threshold: 0.05 # at this distance in [cm] that can not be surpassed
          soft_threshold: 0.1 # robot links are pushed to that distance, but it can be overpowered with high weight constraints
    # each controlled joint gets pushed away from its X nearest objects
    # to reduce the runtime, you can set different values for joints that control end effectors
    number_of_repeller:
      default: 1
      end_effector_joints: 4
  self_collision_avoidance:
    distance_thresholds: # thresholds for self collision avoidance are set for each link pair
      default: &default # you can set variables and reuse them
        hard_threshold: 0.0 # at this distance in [cm] that can not be surpassed
        soft_threshold: 0.05 # robot links are pushed to that distance, but it can be overpowered with high weight constraints
      override:
        low: &low
          hard_threshold: 0.005
          soft_threshold: 0.02
        low2: &low2
          hard_threshold: 0.0
          soft_threshold: 0.00001
        ur5_wrist_1_link: *low
        ur5_wrist_2_link: *low
        ur5_wrist_3_link: *low
        ur5_forearm_link: *low
        ur5_upper_arm_link: *low
        gripper_gripper_left_link: *low2
        gripper_gripper_right_link: *low2
        refills_finger, refills_tool_frame: *low2
    ignore: # list pairs of links that should be removed from the self collision avoidance
#    ignore: #example
#      - [base_link, l_upper_arm_link]
      - [ur5_forearm_link, ur5_wrist_3_link]
      - [ur5_base_link, ur5_upper_arm_link]
    add: # list pairs of links that should be added to the self collision matrix
      - [plate, ur5_upper_arm_link]
    number_of_repeller: 1 # each movable joint gets pushed away from the X objects closest to it



#    low: &low
#      max_weight_distance: 0.005
#      low_weight_distance: 0.01
#      zero_weight_distance: 0.02
#    base_link:
#      max_weight_distance: 0.04
#      low_weight_distance: 0.06
#      zero_weight_distance: 0.09
#    ur5_wrist_1_link: *low
#    ur5_wrist_2_link: *low
#    ur5_wrist_3_link: *low
#    ur5_forearm_link: *low
#    ur5_upper_arm_link: *low
